{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/wingd/OneDrive/Documentos/GitHub/desafio-coordene/code/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/wingd/OneDrive/Documentos/GitHub/desafio-coordene/code/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nvar stringify = require('./lib/stringify');\n\nvar compile = require('./lib/compile');\n\nvar expand = require('./lib/expand');\n\nvar parse = require('./lib/parse');\n/**\r\n * Expand the given pattern or create a regex-compatible string.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\r\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {String}\r\n * @api public\r\n */\n\n\nvar braces = function braces(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var output = [];\n\n  if (Array.isArray(input)) {\n    var _iterator = _createForOfIteratorHelper(input),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var pattern = _step.value;\n        var result = braces.create(pattern, options);\n\n        if (Array.isArray(result)) {\n          var _output;\n\n          (_output = output).push.apply(_output, _toConsumableArray(result));\n        } else {\n          output.push(result);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = _toConsumableArray(new Set(output));\n  }\n\n  return output;\n};\n/**\r\n * Parse the given `str` with the given `options`.\r\n *\r\n * ```js\r\n * // braces.parse(pattern, [, options]);\r\n * const ast = braces.parse('a/{b,c}/d');\r\n * console.log(ast);\r\n * ```\r\n * @param {String} pattern Brace pattern to parse\r\n * @param {Object} options\r\n * @return {Object} Returns an AST\r\n * @api public\r\n */\n\n\nbraces.parse = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return parse(input, options);\n};\n/**\r\n * Creates a braces string from an AST, or an AST node.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * let ast = braces.parse('foo/{a,b}/bar');\r\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\n\n\nbraces.stringify = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n\n  return stringify(input, options);\n};\n/**\r\n * Compiles a brace pattern into a regex-compatible, optimized string.\r\n * This method is called by the main [braces](#braces) function by default.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.compile('a/{b,c}/d'));\r\n * //=> ['a/(b|c)/d']\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\n\n\nbraces.compile = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  return compile(input, options);\n};\n/**\r\n * Expands a brace pattern into an array. This method is called by the\r\n * main [braces](#braces) function when `options.expand` is true. Before\r\n * using this method it's recommended that you read the [performance notes](#performance))\r\n * and advantages of using [.compile](#compile) instead.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.expand('a/{b,c}/d'));\r\n * //=> ['a/b/d', 'a/c/d'];\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\n\n\nbraces.expand = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  var result = expand(input, options); // filter out empty strings if specified\n\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  } // filter out duplicates if specified\n\n\n  if (options.nodupes === true) {\n    result = _toConsumableArray(new Set(result));\n  }\n\n  return result;\n};\n/**\r\n * Processes a brace pattern and returns either an expanded array\r\n * (if `options.expand` is true), a highly optimized regex-compatible string.\r\n * This method is called by the main [braces](#braces) function.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\r\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\n\n\nbraces.create = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n  return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);\n};\n/**\r\n * Expose \"braces\"\r\n */\n\n\nmodule.exports = braces;","map":{"version":3,"sources":["C:/Users/wingd/OneDrive/Documentos/GitHub/desafio-coordene/code/node_modules/braces/index.js"],"names":["stringify","require","compile","expand","parse","braces","input","options","output","Array","isArray","pattern","result","create","push","concat","nodupes","Set","noempty","filter","Boolean","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst stringify = require('./lib/stringify');\r\nconst compile = require('./lib/compile');\r\nconst expand = require('./lib/expand');\r\nconst parse = require('./lib/parse');\r\n\r\n/**\r\n * Expand the given pattern or create a regex-compatible string.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\r\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nconst braces = (input, options = {}) => {\r\n  let output = [];\r\n\r\n  if (Array.isArray(input)) {\r\n    for (let pattern of input) {\r\n      let result = braces.create(pattern, options);\r\n      if (Array.isArray(result)) {\r\n        output.push(...result);\r\n      } else {\r\n        output.push(result);\r\n      }\r\n    }\r\n  } else {\r\n    output = [].concat(braces.create(input, options));\r\n  }\r\n\r\n  if (options && options.expand === true && options.nodupes === true) {\r\n    output = [...new Set(output)];\r\n  }\r\n  return output;\r\n};\r\n\r\n/**\r\n * Parse the given `str` with the given `options`.\r\n *\r\n * ```js\r\n * // braces.parse(pattern, [, options]);\r\n * const ast = braces.parse('a/{b,c}/d');\r\n * console.log(ast);\r\n * ```\r\n * @param {String} pattern Brace pattern to parse\r\n * @param {Object} options\r\n * @return {Object} Returns an AST\r\n * @api public\r\n */\r\n\r\nbraces.parse = (input, options = {}) => parse(input, options);\r\n\r\n/**\r\n * Creates a braces string from an AST, or an AST node.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * let ast = braces.parse('foo/{a,b}/bar');\r\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces.stringify = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    return stringify(braces.parse(input, options), options);\r\n  }\r\n  return stringify(input, options);\r\n};\r\n\r\n/**\r\n * Compiles a brace pattern into a regex-compatible, optimized string.\r\n * This method is called by the main [braces](#braces) function by default.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.compile('a/{b,c}/d'));\r\n * //=> ['a/(b|c)/d']\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces.compile = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    input = braces.parse(input, options);\r\n  }\r\n  return compile(input, options);\r\n};\r\n\r\n/**\r\n * Expands a brace pattern into an array. This method is called by the\r\n * main [braces](#braces) function when `options.expand` is true. Before\r\n * using this method it's recommended that you read the [performance notes](#performance))\r\n * and advantages of using [.compile](#compile) instead.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.expand('a/{b,c}/d'));\r\n * //=> ['a/b/d', 'a/c/d'];\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces.expand = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    input = braces.parse(input, options);\r\n  }\r\n\r\n  let result = expand(input, options);\r\n\r\n  // filter out empty strings if specified\r\n  if (options.noempty === true) {\r\n    result = result.filter(Boolean);\r\n  }\r\n\r\n  // filter out duplicates if specified\r\n  if (options.nodupes === true) {\r\n    result = [...new Set(result)];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Processes a brace pattern and returns either an expanded array\r\n * (if `options.expand` is true), a highly optimized regex-compatible string.\r\n * This method is called by the main [braces](#braces) function.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\r\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces.create = (input, options = {}) => {\r\n  if (input === '' || input.length < 3) {\r\n    return [input];\r\n  }\r\n\r\n return options.expand !== true\r\n    ? braces.compile(input, options)\r\n    : braces.expand(input, options);\r\n};\r\n\r\n/**\r\n * Expose \"braces\"\r\n */\r\n\r\nmodule.exports = braces;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nvar utils = require('./utils');\n\nvar _require = require('./constants'),\n    CHAR_ASTERISK = _require.CHAR_ASTERISK,\n    CHAR_AT = _require.CHAR_AT,\n    CHAR_BACKWARD_SLASH = _require.CHAR_BACKWARD_SLASH,\n    CHAR_COMMA = _require.CHAR_COMMA,\n    CHAR_DOT = _require.CHAR_DOT,\n    CHAR_EXCLAMATION_MARK = _require.CHAR_EXCLAMATION_MARK,\n    CHAR_FORWARD_SLASH = _require.CHAR_FORWARD_SLASH,\n    CHAR_LEFT_CURLY_BRACE = _require.CHAR_LEFT_CURLY_BRACE,\n    CHAR_LEFT_PARENTHESES = _require.CHAR_LEFT_PARENTHESES,\n    CHAR_LEFT_SQUARE_BRACKET = _require.CHAR_LEFT_SQUARE_BRACKET,\n    CHAR_PLUS = _require.CHAR_PLUS,\n    CHAR_QUESTION_MARK = _require.CHAR_QUESTION_MARK,\n    CHAR_RIGHT_CURLY_BRACE = _require.CHAR_RIGHT_CURLY_BRACE,\n    CHAR_RIGHT_PARENTHESES = _require.CHAR_RIGHT_PARENTHESES,\n    CHAR_RIGHT_SQUARE_BRACKET = _require.CHAR_RIGHT_SQUARE_BRACKET;\n\nvar isPathSeparator = function isPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nvar depth = function depth(token) {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n/**\r\n * Quickly scans a glob pattern and returns an object with a handful of\r\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\r\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\r\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\r\n *\r\n * ```js\r\n * const pm = require('picomatch');\r\n * console.log(pm.scan('foo/bar/*.js'));\r\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with tokens and regex source string.\r\n * @api public\r\n */\n\n\nvar scan = function scan(input, options) {\n  var opts = options || {};\n  var length = input.length - 1;\n  var scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  var slashes = [];\n  var tokens = [];\n  var parts = [];\n  var str = input;\n  var index = -1;\n  var start = 0;\n  var lastIndex = 0;\n  var isBrace = false;\n  var isBracket = false;\n  var isGlob = false;\n  var isExtglob = false;\n  var isGlobstar = false;\n  var braceEscaped = false;\n  var backslashes = false;\n  var negated = false;\n  var negatedExtglob = false;\n  var finished = false;\n  var braces = 0;\n  var prev;\n  var code;\n  var token = {\n    value: '',\n    depth: 0,\n    isGlob: false\n  };\n\n  var eos = function eos() {\n    return index >= length;\n  };\n\n  var peek = function peek() {\n    return str.charCodeAt(index + 1);\n  };\n\n  var advance = function advance() {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    var next = void 0;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = {\n        value: '',\n        depth: 0,\n        isGlob: false\n      };\n      if (finished === true) continue;\n\n      if (prev === CHAR_DOT && index === start + 1) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      var isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n\n        continue;\n      }\n\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  var base = str;\n  var prefix = '';\n  var glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  var state = {\n    prefix: prefix,\n    input: input,\n    start: start,\n    base: base,\n    glob: glob,\n    isBrace: isBrace,\n    isBracket: isBracket,\n    isGlob: isGlob,\n    isExtglob: isExtglob,\n    isGlobstar: isGlobstar,\n    negated: negated,\n    negatedExtglob: negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    var prevIndex;\n\n    for (var idx = 0; idx < slashes.length; idx++) {\n      var n = prevIndex ? prevIndex + 1 : start;\n      var i = slashes[idx];\n      var value = input.slice(n, i);\n\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      var _value = input.slice(prevIndex + 1);\n\n      parts.push(_value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = _value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;","map":{"version":3,"sources":["C:/Users/wingd/OneDrive/Documentos/GitHub/desafio-coordene/code/node_modules/picomatch/lib/scan.js"],"names":["utils","require","CHAR_ASTERISK","CHAR_AT","CHAR_BACKWARD_SLASH","CHAR_COMMA","CHAR_DOT","CHAR_EXCLAMATION_MARK","CHAR_FORWARD_SLASH","CHAR_LEFT_CURLY_BRACE","CHAR_LEFT_PARENTHESES","CHAR_LEFT_SQUARE_BRACKET","CHAR_PLUS","CHAR_QUESTION_MARK","CHAR_RIGHT_CURLY_BRACE","CHAR_RIGHT_PARENTHESES","CHAR_RIGHT_SQUARE_BRACKET","isPathSeparator","code","depth","token","isPrefix","isGlobstar","Infinity","scan","input","options","opts","length","scanToEnd","parts","slashes","tokens","str","index","start","lastIndex","isBrace","isBracket","isGlob","isExtglob","braceEscaped","backslashes","negated","negatedExtglob","finished","braces","prev","value","eos","peek","charCodeAt","advance","next","push","noext","isExtglobChar","nonegate","noparen","base","prefix","glob","slice","unescape","removeBackslashes","state","maxDepth","prevIndex","idx","n","i","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst utils = require('./utils');\r\nconst {\r\n  CHAR_ASTERISK,             /* * */\r\n  CHAR_AT,                   /* @ */\r\n  CHAR_BACKWARD_SLASH,       /* \\ */\r\n  CHAR_COMMA,                /* , */\r\n  CHAR_DOT,                  /* . */\r\n  CHAR_EXCLAMATION_MARK,     /* ! */\r\n  CHAR_FORWARD_SLASH,        /* / */\r\n  CHAR_LEFT_CURLY_BRACE,     /* { */\r\n  CHAR_LEFT_PARENTHESES,     /* ( */\r\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\r\n  CHAR_PLUS,                 /* + */\r\n  CHAR_QUESTION_MARK,        /* ? */\r\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\r\n  CHAR_RIGHT_PARENTHESES,    /* ) */\r\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\r\n} = require('./constants');\r\n\r\nconst isPathSeparator = code => {\r\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n};\r\n\r\nconst depth = token => {\r\n  if (token.isPrefix !== true) {\r\n    token.depth = token.isGlobstar ? Infinity : 1;\r\n  }\r\n};\r\n\r\n/**\r\n * Quickly scans a glob pattern and returns an object with a handful of\r\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\r\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\r\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\r\n *\r\n * ```js\r\n * const pm = require('picomatch');\r\n * console.log(pm.scan('foo/bar/*.js'));\r\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with tokens and regex source string.\r\n * @api public\r\n */\r\n\r\nconst scan = (input, options) => {\r\n  const opts = options || {};\r\n\r\n  const length = input.length - 1;\r\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\r\n  const slashes = [];\r\n  const tokens = [];\r\n  const parts = [];\r\n\r\n  let str = input;\r\n  let index = -1;\r\n  let start = 0;\r\n  let lastIndex = 0;\r\n  let isBrace = false;\r\n  let isBracket = false;\r\n  let isGlob = false;\r\n  let isExtglob = false;\r\n  let isGlobstar = false;\r\n  let braceEscaped = false;\r\n  let backslashes = false;\r\n  let negated = false;\r\n  let negatedExtglob = false;\r\n  let finished = false;\r\n  let braces = 0;\r\n  let prev;\r\n  let code;\r\n  let token = { value: '', depth: 0, isGlob: false };\r\n\r\n  const eos = () => index >= length;\r\n  const peek = () => str.charCodeAt(index + 1);\r\n  const advance = () => {\r\n    prev = code;\r\n    return str.charCodeAt(++index);\r\n  };\r\n\r\n  while (index < length) {\r\n    code = advance();\r\n    let next;\r\n\r\n    if (code === CHAR_BACKWARD_SLASH) {\r\n      backslashes = token.backslashes = true;\r\n      code = advance();\r\n\r\n      if (code === CHAR_LEFT_CURLY_BRACE) {\r\n        braceEscaped = true;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\r\n      braces++;\r\n\r\n      while (eos() !== true && (code = advance())) {\r\n        if (code === CHAR_BACKWARD_SLASH) {\r\n          backslashes = token.backslashes = true;\r\n          advance();\r\n          continue;\r\n        }\r\n\r\n        if (code === CHAR_LEFT_CURLY_BRACE) {\r\n          braces++;\r\n          continue;\r\n        }\r\n\r\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\r\n          isBrace = token.isBrace = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n\r\n          if (scanToEnd === true) {\r\n            continue;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        if (braceEscaped !== true && code === CHAR_COMMA) {\r\n          isBrace = token.isBrace = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n\r\n          if (scanToEnd === true) {\r\n            continue;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\r\n          braces--;\r\n\r\n          if (braces === 0) {\r\n            braceEscaped = false;\r\n            isBrace = token.isBrace = true;\r\n            finished = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_FORWARD_SLASH) {\r\n      slashes.push(index);\r\n      tokens.push(token);\r\n      token = { value: '', depth: 0, isGlob: false };\r\n\r\n      if (finished === true) continue;\r\n      if (prev === CHAR_DOT && index === (start + 1)) {\r\n        start += 2;\r\n        continue;\r\n      }\r\n\r\n      lastIndex = index + 1;\r\n      continue;\r\n    }\r\n\r\n    if (opts.noext !== true) {\r\n      const isExtglobChar = code === CHAR_PLUS\r\n        || code === CHAR_AT\r\n        || code === CHAR_ASTERISK\r\n        || code === CHAR_QUESTION_MARK\r\n        || code === CHAR_EXCLAMATION_MARK;\r\n\r\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\r\n        isGlob = token.isGlob = true;\r\n        isExtglob = token.isExtglob = true;\r\n        finished = true;\r\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\r\n          negatedExtglob = true;\r\n        }\r\n\r\n        if (scanToEnd === true) {\r\n          while (eos() !== true && (code = advance())) {\r\n            if (code === CHAR_BACKWARD_SLASH) {\r\n              backslashes = token.backslashes = true;\r\n              code = advance();\r\n              continue;\r\n            }\r\n\r\n            if (code === CHAR_RIGHT_PARENTHESES) {\r\n              isGlob = token.isGlob = true;\r\n              finished = true;\r\n              break;\r\n            }\r\n          }\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (code === CHAR_ASTERISK) {\r\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\r\n      isGlob = token.isGlob = true;\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_QUESTION_MARK) {\r\n      isGlob = token.isGlob = true;\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\r\n      while (eos() !== true && (next = advance())) {\r\n        if (next === CHAR_BACKWARD_SLASH) {\r\n          backslashes = token.backslashes = true;\r\n          advance();\r\n          continue;\r\n        }\r\n\r\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\r\n          isBracket = token.isBracket = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\r\n      negated = token.negated = true;\r\n      start++;\r\n      continue;\r\n    }\r\n\r\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\r\n      isGlob = token.isGlob = true;\r\n\r\n      if (scanToEnd === true) {\r\n        while (eos() !== true && (code = advance())) {\r\n          if (code === CHAR_LEFT_PARENTHESES) {\r\n            backslashes = token.backslashes = true;\r\n            code = advance();\r\n            continue;\r\n          }\r\n\r\n          if (code === CHAR_RIGHT_PARENTHESES) {\r\n            finished = true;\r\n            break;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (isGlob === true) {\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (opts.noext === true) {\r\n    isExtglob = false;\r\n    isGlob = false;\r\n  }\r\n\r\n  let base = str;\r\n  let prefix = '';\r\n  let glob = '';\r\n\r\n  if (start > 0) {\r\n    prefix = str.slice(0, start);\r\n    str = str.slice(start);\r\n    lastIndex -= start;\r\n  }\r\n\r\n  if (base && isGlob === true && lastIndex > 0) {\r\n    base = str.slice(0, lastIndex);\r\n    glob = str.slice(lastIndex);\r\n  } else if (isGlob === true) {\r\n    base = '';\r\n    glob = str;\r\n  } else {\r\n    base = str;\r\n  }\r\n\r\n  if (base && base !== '' && base !== '/' && base !== str) {\r\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\r\n      base = base.slice(0, -1);\r\n    }\r\n  }\r\n\r\n  if (opts.unescape === true) {\r\n    if (glob) glob = utils.removeBackslashes(glob);\r\n\r\n    if (base && backslashes === true) {\r\n      base = utils.removeBackslashes(base);\r\n    }\r\n  }\r\n\r\n  const state = {\r\n    prefix,\r\n    input,\r\n    start,\r\n    base,\r\n    glob,\r\n    isBrace,\r\n    isBracket,\r\n    isGlob,\r\n    isExtglob,\r\n    isGlobstar,\r\n    negated,\r\n    negatedExtglob\r\n  };\r\n\r\n  if (opts.tokens === true) {\r\n    state.maxDepth = 0;\r\n    if (!isPathSeparator(code)) {\r\n      tokens.push(token);\r\n    }\r\n    state.tokens = tokens;\r\n  }\r\n\r\n  if (opts.parts === true || opts.tokens === true) {\r\n    let prevIndex;\r\n\r\n    for (let idx = 0; idx < slashes.length; idx++) {\r\n      const n = prevIndex ? prevIndex + 1 : start;\r\n      const i = slashes[idx];\r\n      const value = input.slice(n, i);\r\n      if (opts.tokens) {\r\n        if (idx === 0 && start !== 0) {\r\n          tokens[idx].isPrefix = true;\r\n          tokens[idx].value = prefix;\r\n        } else {\r\n          tokens[idx].value = value;\r\n        }\r\n        depth(tokens[idx]);\r\n        state.maxDepth += tokens[idx].depth;\r\n      }\r\n      if (idx !== 0 || value !== '') {\r\n        parts.push(value);\r\n      }\r\n      prevIndex = i;\r\n    }\r\n\r\n    if (prevIndex && prevIndex + 1 < input.length) {\r\n      const value = input.slice(prevIndex + 1);\r\n      parts.push(value);\r\n\r\n      if (opts.tokens) {\r\n        tokens[tokens.length - 1].value = value;\r\n        depth(tokens[tokens.length - 1]);\r\n        state.maxDepth += tokens[tokens.length - 1].depth;\r\n      }\r\n    }\r\n\r\n    state.slashes = slashes;\r\n    state.parts = parts;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nmodule.exports = scan;\r\n"]},"metadata":{},"sourceType":"script"}